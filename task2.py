# task2.py
import networkx as nx
from collections import deque

# –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ–∞ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è 1
G = nx.Graph()
stations = [
    "Central", "North", "South", "East", "West",
    "Park", "University", "Market", "Airport", "Harbor"
]
G.add_nodes_from(stations)
routes = [
    ("Central", "North"),
    ("Central", "South"),
    ("Central", "East"),
    ("Central", "West"),
    ("North", "University"),
    ("South", "Park"),
    ("East", "Market"),
    ("West", "Market"),
    ("Market", "University"),
    ("Park", "Harbor"),
    ("Airport", "Harbor")
]
G.add_edges_from(routes)

# DFS: –ø–æ—à—É–∫ —à–ª—è—Ö—É —É –≥–ª–∏–±–∏–Ω—É
def dfs_path(graph, start, goal):
    stack = [(start, [start])]
    visited = set()
    while stack:
        vertex, path = stack.pop()
        if vertex == goal:
            return path
        if vertex not in visited:
            visited.add(vertex)
            for neighbor in reversed(list(graph.neighbors(vertex))):
                if neighbor not in visited:
                    stack.append((neighbor, path + [neighbor]))
    return None

# BFS: –ø–æ—à—É–∫ —à–ª—è—Ö—É –≤ —à–∏—Ä–∏–Ω—É
def bfs_path(graph, start, goal):
    queue = deque([(start, [start])])
    visited = set()
    while queue:
        vertex, path = queue.popleft()
        if vertex == goal:
            return path
        if vertex not in visited:
            visited.add(vertex)
            for neighbor in graph.neighbors(vertex):
                if neighbor not in visited:
                    queue.append((neighbor, path + [neighbor]))
    return None

# –ó–Ω–∞–π–¥–µ–º–æ —à–ª—è—Ö –≤—ñ–¥ "Central" –¥–æ "Harbor"
start, goal = "Central", "Harbor"
dfs_result = dfs_path(G, start, goal)
bfs_result = bfs_path(G, start, goal)

# –í–∏–≤—ñ–¥
print("üîç –®–ª—è—Ö DFS:", " ‚Üí ".join(dfs_result))
print("üîç –®–ª—è—Ö BFS:", " ‚Üí ".join(bfs_result))

# –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
print("\nüìå –ü–æ—è—Å–Ω–µ–Ω–Ω—è:")
print("DFS —à—É–∫–∞—î —à–ª—è—Ö —É –≥–ª–∏–±–∏–Ω—É, —Ç–æ–º—É –º–æ–∂–µ –ø—Ä–æ–π—Ç–∏ –¥–æ–≤—à–∏–π –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –∑–Ω–∞–π–¥–µ —Ü—ñ–ª—å.")
print("BFS —à—É–∫–∞—î –≤ —à–∏—Ä–∏–Ω—É, —Ç–æ–º—É –∑–∞–≤–∂–¥–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö (–∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å—Ç–∞–Ω—Ü—ñ–π).")